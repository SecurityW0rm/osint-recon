import requests
import argparse
import json
import os
#==========================================================EDIT BELOW HERE=========================================================================
# Shodan API Key
SHODAN_API_KEY = "your_shodan_api_key"

# HaveIBeenPwned API Key
HIBP_API_KEY = "your_haveibeenpwned_api_key"

# WHOIS API Key
WHOIS_API_URL = "https://www.whoisxmlapi.com/whoisserver/WhoisService"
WHOIS_API_KEY = "your_whois_api_key"
#==========================================================EDIT ABOVE HERE=========================================================================
def shodan_recon(target):
    """Query Shodan for target information."""
    url = f"https://api.shodan.io/shodan/host/{target}?key={SHODAN_API_KEY}"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            return {
                "IP": data.get("ip_str", "N/A"),
                "Organization": data.get("org", "N/A"),
                "ISP": data.get("isp", "N/A"),
                "Open Ports": data.get("ports", []),
                "Location": f"{data.get('city', 'N/A')}, {data.get('country_name', 'N/A')}"
            }
        else:
            return {"error": f"Error fetching data from Shodan: {response.text}"}
    except Exception as e:
        return {"error": f"Shodan query failed: {str(e)}"}

def whois_recon(domain):
    """Query WHOIS API for domain information."""
    params = {
        "apiKey": WHOIS_API_KEY,
        "domainName": domain,
        "outputFormat": "JSON"
    }
    try:
        response = requests.get(WHOIS_API_URL, params=params)
        if response.status_code == 200:
            data = response.json()
            return {
                "Domain Name": data.get("WhoisRecord", {}).get("domainName", "N/A"),
                "Registrar": data.get("WhoisRecord", {}).get("registrarName", "N/A"),
                "Creation Date": data.get("WhoisRecord", {}).get("createdDate", "N/A"),
                "Expiration Date": data.get("WhoisRecord", {}).get("expiresDate", "N/A"),
                "Registrant": data.get("WhoisRecord", {}).get("registrant", {}).get("organization", "N/A")
            }
        else:
            return {"error": f"Error fetching data from WHOIS: {response.text}"}
    except Exception as e:
        return {"error": f"WHOIS query failed: {str(e)}"}

def generate_text_report(target, data):
    """Generate a readable text report and save it on the desktop."""
    desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
    report_path = os.path.join(desktop_path, f"{target}_recon_report.txt")
    try:
        with open(report_path, "w") as report:
            report.write(f"OSINT Recon Report for Target: {target}\n")
            report.write("=" * 50 + "\n\n")

            report.write("Shodan Data:\n")
            for key, value in data.get("Shodan Data", {}).items():
                report.write(f"- {key}: {value}\n")

            report.write("\nWHOIS Data:\n")
            for key, value in data.get("WHOIS Data", {}).items():
                report.write(f"- {key}: {value}\n")

            if "HaveIBeenPwned Data" in data:
                report.write("\nHaveIBeenPwned Data:\n")
                breaches = data["HaveIBeenPwned Data"].get("Breaches", [])
                if isinstance(breaches, list):
                    for breach in breaches:
                        report.write(f"- {breach}\n")
                else:
                    report.write(f"- {breaches}\n")

            report.write("\n")
            report.write("=" * 50 + "\n")
            report.write(f"Report generated by OSINT Recon Script.\n")
        print(f"[INFO] Report saved as: {report_path}")
    except Exception as e:
        print(f"[ERROR] Failed to save report: {str(e)}")

def main():
    parser = argparse.ArgumentParser(description="Automated OSINT Recon Script")
    parser.add_argument("-t", "--target", required=True, help="Target IP, domain, or username for recon")
    args = parser.parse_args()

    target = args.target

    print(f"[INFO] Starting OSINT recon on: {target}")
    shodan_data = shodan_recon(target)
    whois_data = whois_recon(target)

    report = {
        "Target": target,
        "Shodan Data": shodan_data,
        "WHOIS Data": whois_data
    }

    print(json.dumps(report, indent=4))
    generate_text_report(target, report)

if __name__ == "__main__":
    main()
